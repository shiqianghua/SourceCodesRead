A name is a sequence of path elements separated by a slash (/). Every node in ZooKeeper's namespace is identified by a path
名称是由斜杠(/)分隔的路径元素序列。ZooKeeper名称空间中的每个节点都由一个路径标识

ZooKeeper also has the notion of ephemeral nodes. These znodes exists as long as the session that created the znode is active. 
When the session ends the znode is deleted

•	Sequential Consistency - Updates from a client will be applied in the order that they were sent.
•	Atomicity - Updates either succeed or fail. No partial results.
•	Single System Image - A client will see the same view of the service regardless of the server that it connects to. i.e., a client will never see an older view of the system even if the client fails over to a different server with the same session.
•	Reliability - Once an update has been applied, it will persist from that time forward until a client overwrites the update.
•	Timeliness - The clients view of the system is guaranteed to be up-to-date within a certain time bound.
•顺序一致性——来自客户端的更新将按照发送的顺序进行。
原子性——更新成功或失败。没有部分结果。
•单个系统映像——无论连接到哪个服务器，客户机都将看到相同的服务视图。即。，即使客户机故障转移到具有相同会话的不同服务器，客户机也永远不会看到系统的旧视图。
•可靠性——一旦应用了更新，它将一直持续，直到客户端覆盖更新。
及时性-客户对系统的看法是保证在一定的时间范围内是最新的。

With the exception of the request processor, each of the servers that make up the ZooKeeper service replicates its own copy of each of the components.
除了请求处理器之外，构成ZooKeeper服务的每个服务器都复制每个组件的自己的副本。

As part of the agreement protocol all write requests from clients are forwarded to a single server, called the leader. The rest of the ZooKeeper servers, called followers, receive message proposals from the leader and agree upon message delivery. The messaging layer takes care of replacing leaders on failures and syncing followers with leaders
作为协议的一部分，所有来自客户端的写请求都被转发到一个名为leader的服务器上。Zookerper服务器的其余部分(称为追随者)接收来自领导者的消息建议，并就消息传递达成一致。消息层负责在出现故障时替换领导者，并将追随者与领导者同步
ZooKeeper uses a custom atomic messaging protocol. Since the messaging layer is atomic, ZooKeeper can guarantee that the local replicas never diverge. When the leader receives a write request, it calculates what the state of the system is when the write is to be applied and transforms this into a transaction that captures this new state
ZooKeeper使用自定义原子消息传递协议。因为消息层是原子的，所以ZooKeeper可以保证本地副本不会发散。当leader收到一个写请求时，它会计算将要应用的写时系统的状态，并将其转换为捕获这个新状态的事务

Benchmarks also indicate that it is reliable, too. Reliability in the Presence of Errors shows how a deployment responds to various failures. The events marked in the figure are the following:

Failure and recovery of a follower
Failure and recovery of a different follower
Failure of the leader
Failure and recovery of two followers
Failure of another leader
基准测试也表明它是可靠的。错误存在时的可靠性显示了部署如何响应各种故障。图中标注的事件如下:
跟随者的失败和恢复
失败和恢复的追随者不同
领导者的失败
两个追随者的失败和恢复
另一位领导者的失败

To show the behavior of the system over time as failures are injected we ran a ZooKeeper service made up of 7 machines
为了显示系统在注入故障时的随时间变化的行为，我们运行了一个由7台机器组成的ZooKeeper服务
There are a few important observations from this graph. First, if followers fail and recover quickly, 
then ZooKeeper is able to sustain a high throughput despite the failure. But maybe more importantly, 
the leader election algorithm allows for the system to recover fast enough to prevent throughput from dropping substantially.
In our observations, ZooKeeper takes less than 200ms to elect a new leader. Third, as followers recover, 
ZooKeeper is able to raise throughput again once they start processing requests

tickTime : the basic time unit in milliseconds used by ZooKeeper. It is used to do heartbeats and the minimum session timeout will be twice the tickTime
使用的以毫秒为单位的基本时间单位。它是用来做心跳和最小的会话超时将是滴答时间的两倍

For replicated mode, a minimum of three servers are required, and it is strongly recommended that you have an odd number of servers. 
If you only have two servers, then you are in a situation where if one of them fails, there are not enough machines to form a majority quorum. 
Two servers are inherently less stable than a single server, because there are two single points of failure.

initLimit和syncLimit区别：
The new entry, initLimit is timeouts ZooKeeper uses to limit the length of time the ZooKeeper servers in quorum have to connect to a leader. 
The entry syncLimit limits how far out of date a server can be from a leader.

With both of these timeouts, you specify the unit of time using tickTime. In this example, 
the timeout for initLimit is 5 ticks at 2000 milliseconds a tick, or 10 seconds.

The entries of the form server.X list the servers that make up the ZooKeeper service. When the server starts up, 
it knows which server it is by looking for the file myid in the data directory. That file has the contains the server number, 
in ASCII.
新的条目initLimit是ZooKeeper用来限制quorum里的ZooKeeper服务器必须连接到leader的超时时间。条目syncLimit限制了服务器与领导者之间的过时程度。
对于这两个超时，您可以使用tickTime指定时间单位。在本例中，initLimit的超时时间为5个节拍，每个节拍为2000毫秒，即10秒。
表单服务器的条目。列出构成ZooKeeper服务的服务器。当服务器启动时，它通过在数据目录中查找文件myid来知道它是哪个服务器。该文件包含服务器号，用ASCII表示。

Please be aware that setting up multiple servers on a single machine will not create any redundancy.
If something were to happen which caused the machine to die, all of the zookeeper servers would be offline. 
Full redundancy requires that each server have its own machine. It must be a completely separate physical server. 
Multiple virtual machines on the same physical host are still vulnerable to the complete failure of that host.
请注意，在一台机器上设置多个服务器不会产生任何冗余。如果发生了导致机器死亡的事情，所有的zookeeper服务器都将离线。完全冗余要求每个服务器都有自己的机器。
它必须是一个完全独立的物理服务器。同一物理主机上的多个虚拟机仍然容易受到该主机完全故障的影响。

Paths to nodes are always expressed as canonical, absolute, slash-separated paths; there are no relative reference.
Any unicode character can be used in a path subject to the following constraints
节点的路径总是表示为规范的、绝对的、斜杠分隔的路径;没有相对的参考。任何unicode字符都可以在受以下约束的路径中使用


note:
In distributed application engineering, the word node can refer to a generic host machine, a server, a member of an ensemble, a client process, etc.
In the ZooKeeper documentation, znodes refer to the data nodes. Servers refers to machines that make up the ZooKeeper service; 
quorum peers refer to the servers that make up an ensemble; client refers to any host or process which uses a ZooKeeper service
在分布式应用工程中，“节点”一词可以指一般的主机、服务器、集成的成员、客户端进程等。在ZooKeeper文档中，znodes指的是数据节点。
服务器指的是构成ZooKeeper服务的机器;quorum peer是指组成合集的服务器;
客户端是指任何使用ZooKeeper服务的主机或进程

Because of this behavior ephemeral znodes are not allowed to have children
When creating a znode you can also request that ZooKeeper append a monotonically increasing counter to the end of path. 
This counter is unique to the parent znode

The current implementation requires that the timeout be a minimum of 2 times the tickTime (as set in the server configuration)
and a maximum of 20 times the tickTime
当前实现要求超时最小为tickTime的2倍(在服务器配置中设置)，最大为tickTime的20倍

In particular we have heuristics built into the client library to handle things like "herd effect", etc... 
Only create a new session when you are notified of session expiration (mandatory)
特别是，我们在客户端库中构建了启发式机制来处理诸如“羊群效应”等问题。只有在会话过期通知时才创建新会话(强制)

